pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

-- game state
state = { menu = 1, lvl = 2 }
paused = 0

mapx = 0
mapy = 0

mapox = 0 -- o=offset
mapoy = 0

-- player
player = {}

-- consts
gridsize = 8
dimensions = 16

-- sprite indexes
index = {
	player = 62,

	block = 16,

	key = 20,
	tank = 21,

	rpenguin = 48,
	dpenguin = 49,
	upenguin = 50,

	jelly1 = 59,
	jelly2 = 60,

	bturtle = 57,
	hturtle = 58,

	snake = 61,
}

-- animations: TODO: key is 1st sprite, value is max sprite #
anim = {
	water1 = 8,
	water2 = 9,
}

-- sprite flags
fwalkable = 0x1
--fwater = 0x2
fice = 0x4
--ffire = 0x8
fclimbable = 0x80

-- debug
blkmsg = 0

-- animations
tick = 0

-- current block sprite positions
sprites = {}
animals = {}
blocks = {}

function _init()
	state.lvl = 2 -- debugging

	player.sdx = 0
	player.sdy = 0
	player.sframe = 0

	-- clear sprites between levels
	for i = 1, dimensions do
		sprites[i] = {}
		animals[i] = {}
		blocks[i] = {}
		for j = 1, dimensions do
			sprites[i][j] = nil
			animals[i][j] = nil
			blocks[i][j] = nil
		end
	end

	-- config levels
	if (state.lvl == 1) then
	    player.x = 2
    	player.y = 2
		mapx = 0
        mapy = 0
        mapox = 0
        mapoy = 0

		blocks[2][2] = index.block
		blocks[3][3] = index.block
		blocks[4][4] = index.block
		blocks[5][5] = index.block
    elseif (state.lvl == 2) then 
        player.x = 4
        player.y = 8
        mapx = 20
        mapy = 0
        mapox = 2
        mapoy = 2

		sprites[7][4] = index.key
		
		--blocks[4][4] = index.block
		--blocks[5][5] = index.block

		animals[3][1] = index.dpenguin
		animals[4][1] = index.dpenguin
		animals[5][1] = index.dpenguin
	end
end

function _update60()
	local dx = 0
	local dy = 0	
		
	-- Try to move the player in the specified direction until they cannot
	if (player.sdx != 0 or player.sdy != 0) then

		-- update pos every n frames
		if (tick % 1 == 0) then
			player.sframe += 1
		end

		-- Advance the player's location a full step
		if (player.sframe == 8) then 
			player.sframe = 0

			player.x += player.sdx
			player.y += player.sdy
						
			dx = player.sdx
			dy = player.sdy
			player.sdx = 0
			player.sdy = 0

			-- pickup if sliding over item
			pickup(player.x, player.y)

			-- test if we can to continue moving by instigating a new movement (may trigger more sliding)
			if (canmove(dx,dy) == false and player.sdx == 0 and player.sdy == 0) then
				moveanimals()
			end
		end
	else
		-- normal movement
		if (btnp(0)) then 
			dx=-1
		elseif (btnp(1)) then
			dx=1
		elseif (btnp(2)) then
			dy=-1
		elseif (btnp(3)) then
			dy=1
		end

		if (canmove(dx, dy)) then
			player.x += dx
			player.y += dy

			pickup(player.x, player.y)
			moveanimals()
		end

	end

end

function _draw()
	tick+=1
	if (tick > 256) tick = 0;

	if (state.menu==0) draw_startmenu()
	if (state.menu==1) draw_level()
	if (state.menu==2) draw_pause()
	if (state.menu==3) draw_ending()

end

function draw_startmenu()
	-- draw the start menu
	cls()

	rectfill(0, 0, 127, 127, 13)



end

function draw_pause()
	-- enter key menu options
end

function draw_ending()
	-- needs some pixels here for when you win
end

function draw_level()
	cls()
	
	-- water animations
	if (tick == 0) then 
		for x=1, dimensions do
			for y=1, dimensions do 
				if (mget(x, y) == anim.water1) then
					mset(x, y, anim.water2)
				elseif(mget(x, y) == anim.water2) then
					mset(x, y, anim.water1)
				end
			end
		end
	end

	-- draw map
	map(mapx, mapy, mapox*gridsize, mapoy*gridsize, 128, 128)

	-- draw sprites
	for i=1, dimensions do
		for j=1, dimensions do
			sprgrid(sprites[i][j], i, j)
			sprgrid(animals[i][j], i, j)
			sprgrid(blocks[i][j], i, j)
		end
	end

	-- draw player
	spr(index.player, (player.x + mapox - 1)*gridsize + player.sdx*player.sframe, (player.y + mapoy - 1)*gridsize + player.sdy*player.sframe)

	-- debug message
	print(blkmsg)
end

function sprgrid(s, x, y)
	if (s) spr(s, (x + mapox - 1)*gridsize, (y + mapoy - 1)*gridsize)
end

function mgetspr(x, y)
	return mget(x + mapx - 1, y + mapy - 1)
end

function moveanimals()
	-- track which animals have already moved
	local moved = {}
	for i=1, dimensions do
		moved[i] = {}
		for j=1, dimensions do
			moved[i][j] = false
		end
	end

	-- move animals in place from top of grid to bottom of grid
	for i=1, dimensions do
		for j=1, dimensions do
			if (moved[i][j] == false) then 
				local a = animals[i][j]

				if (a) then
					if (a == index.dpenguin) then
						local dx = 0
						local dy = 1

						if (acanmove(i, j, dx, dy)) then
							animals[i][j] = nil
							animals[i+dx][j+dy] = a
							moved[i+dx][j+dy] = true
						else
							animals[i][j] = index.upenguin
						end

					elseif (a == index.upenguin) then
						local dx = 0
						local dy = -1

						if (acanmove(i, j, dx, dy)) then
							animals[i][j] = nil
							animals[i+dx][j+dy] = a
							moved[i+dx][j+dy] = true
						else
							animals[i][j] = index.dpenguin
						end

					end
				end
			end
		end
	end
end


function blockingsprite(x, y)
	if (x <= 0 or y <= 0) return nil
	
	if (animals[x][y]) return true
	if (blocks[x][y]) return true
	return false
end

function pickup(x, y)
	if (x <= 0 or y <= 0) return nil

	local s = sprites[x][y]
	sprites[x][y] = nil

	return s
end

function acanmove(ax, ay, dx, dy)
	if (dx == 0 and dy == 0) return false

	local x = ax + dx
	local y = ay + dy
	local nx = x + dx
	local ny = y + dy

	local s = mgetspr(x, y)
	local sn = mgetspr(nx, ny)
	local flags = fget(s)
	local nflags = fget(sn)

	if (blockingsprite(x, y)) return false
	if (band(flags, fwalkable) > 0) return true

	return false
end

-- TODO: Rename
-- Has side effect: sets sliding to a direction of slide
function canmove(dx, dy)
	if (dx == 0 and dy == 0) return false

	local x = player.x + dx
	local y = player.y + dy
	local nx = x + dx
	local ny = y + dy

	local s = mgetspr(x, y)
	local sn = mgetspr(nx, ny)
	local flags = fget(s)
	local nflags = fget(sn)

	if (blockingsprite(x, y)) return false

	if (band(flags, fice) > 0) then
		player.sdx = dx
		player.sdy = dy
		player.frame = 0 -- TODO: not needed

		-- because we wil animate the movement
		return false 
	end

	--if (dx == 0 and band(flags, fclimbale) > 0) then
		-- TODO climbing, falling
	--end

	if (band(flags, fwalkable) > 0) return true

	--return false


	---------------------------
	-- collided with block
	local hblock = false

	--for i in all(blocks) do 
	--	if (i[1] == localx - mapx and i[2] == localy - mapy) hblock = true
	--end

	if (hblock) then 

		if (nspr == 0) then
			--mset(localx, localy, nil)
			--mset(nextx, nexty, index.block)

			-- move the block to empty space

			for i in all(blocks) do 
				if (i[1] == localx and i[2] == localy) then
					del(blocks, i)
					add(blocks, {nextx, nexty})
				end
			end
			return true
		elseif (band(nflag, fwater) > 0) then

			-- move block into the water

			--mset(localx, localy, nil)
			--mset(nextx, nexty, index.waterblock)
			return true
		elseif (band(nflag, fice) > 0) then

			-- TODO: If the block would push another block, don't also push that other block
			-- TODO: Just make a dumb mget/mset but for items iget iset that does all this math since this totally worked before you added all the other things on top of it...
			-- TODO: Also don't forget multiple returns def work in lua

			-- slide block until it hits an obstacle
			
			for i in all(blocks) do 
				if (i[1] == localx-mapx and i[2] == localy-mapy) then
					del(blocks, i)
					add(blocks, {nextx-mapx, nexty-mapy})
				end
			end
			return true


		end

		return false

		// how to represent a block over a block on water?

	end

	return false

end


__gfx__
0000000000ccc00c44444449b3b33bb33a33333311111111aaaaaaaa8f988888ccccccccc7ccccc7ccc777cc0044440000003000000000000000000000000000
000000000cccccc09449444933bb3bb33a333a3311d11ddd7777777789afa8a8ccccccc77ccccccccc777ccc0044440000333330000000000000000000000000
00700700cc44ccc044994444b3bb3bb33aa33a331d11dd11aaaaaaaa888558857ccccc7ccccc7cccc777ccc70044440003bb33b3000000000000000000000000
00077000cc040ccc44444444bb3b3bb333a33a331d1111117777777798a58589cccc7cccc7c7cccc777ccc7700444400033bbbb3000000000000000000000000
00077000cc444cc044499444b33b3bb333aa3a331d11d111aaaaaaaaf988fa88ccc7c7cccc7ccccc77ccc77c0044440003333300000000000000000000000000
007007000ceaeccc44444444b3bb33b333a33333111dd11d777777778558598acc7ccccccccccccc7ccc77c70044440000444400000000000000000000000000
0000000004aea4c099449994b3bbb3b333333333111d1111aaaaaaaa585af8a87ccccccccccc7c7cccc77c7c0044440000444400000000000000000000000000
0000000000aea0c094444444b3bb33bb33aaa33311111111777777778f898989c7ccccc7ccccc7cccc77c7cc0044440000444400000000000000000000000000
00000000cccccccc5444444500000000009999000005500000000000000000000000000000000000000000000000000000000000000000000000000000000000
05444450c544445c4544445400000000009009000055550000000000000000000000000000000000000000000000000000000000000000000000000050505050
04544540c454454c44544544000000000099990000aaaaa000000000000000000000000000000000000000000000000000000000000000000000000005000500
04455440c445544c4445544400000000000900000055550a00000000000000000000000000000000000000000000000000000000000000000000000050505050
04455440c445544c4445544400000000000900000055550a00000000000000000000000000000000000000000000000000000000000000000000000000000000
04544540c454454c44544544000000000009900000aaaa0a00000000000000000000000000000000000000000000000000000000000000000000000055555550
05444450c544445c454444540000000000090000005555a000000000000000000000000000000000000000000000000000000000000000000000000000080800
00000000cccccccc5444444500000000000999000055550000000000000000000000000000000000000000000000000000000000000000000000000000088800
000000406000000600000000060060000333000203350ddd0999000000777700000004400777000044004044e000e000000220000000220000ccc00c00ccc00c
0666000460000066900909500e00e0008b830022033333d04549000007777770044400440a57007004440004eeee000020029002000022900cccccc00c666cc0
6686604066006660995900900e00e000bbb3022000000300444999007777777745f54004aa777770064640440e0e00002202202200002200cc44ccc0c66666c0
6666604006556000399309500666600000b32223003f330004999449565777770fff00040777777004f44440eeeeeeeee222222e00022220cc040cccc65656cc
0066604400550555999959900d6d666000b3223333ff000004494449666777770444404407777770044444400eeeeee00e2222e02222e220cc444cc0c66666c0
006666640555555505995990066666670bb323303000003004449449077777770044444007777700044444400eeeeee000e22e00022e22200ceaeccc0c555ccc
006666600055555509999950066666670b3b3b303300033004040049007777700044440000a7a000040400400eeeeee0000929000022220004aea4c0006660c0
0006066000d0d00d0909009006666660030303300333330004040040006000600400440000a0a000040400400e0e00e0002222000009090000aea0c0000000c0
00005500005550000055500000000b0b000000005500005500000000d09090d009990440000055353550000000eeee0000eeee0000000bb000eeee00000aaa00
0005599000595000005550000000bbb0000000555000055000222000dd090ddd9999904400055355535500000ee77ee00ee77ee00000bbb80eeefee000aaaaa0
0055550000555000005550000000bbb0005555555550555020525022edd9dded95f590040033333333333bb0ee7777eeee7777ee00bbb3000edffde00aa0f0a0
00555700055755000555550000000b0b055855555555550022222220ded9dedd9fff90040535535535535b5b0eeeeee00eeeeee00bb330000effffe00aafffa0
00557700057775000555550000000000555555555555550000222200ddd9ddd009994044bb33333333333bbbe00e00e00e00e00e033000000e666ee00faeeaa0
0055770005777500055555000000bb0b07676555555055500222022000d9d00000444440000bb3333bbb00000e00e00ee00e00e000000bb00ebbbbe00faeeaf0
0055570005575500055555000000bbb0005555550000055022022022ddd9ddd0004444000bbbb00000bbb000e00e00e00e00e00eb00bbb3000ebbe0000addd00
0005990000999000009590000000000b000000555000005520002000ed000ded04004400bbb000000bbb00000e00e00ee00e00e00bbb3300000bb00000eeee00
00000000000900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000099000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000900000099000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00099990000990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999990000990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00990099000999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09999999000099000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09999999000099900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
09999999009999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
99999999999999900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
99999990999999000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00999990099990000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000008020205818100000000000081000000000000000000000000000000000000000000000000000000000000000000000000000000000081000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
00000000000000000000000000000000030303000a0a0a0a0a0a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02020202020202020202020202020203030303000a0a0a0a0a0a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
020000002800002500000000000000030303030002020a0a0a02020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
020034350000000000002200000000030303030002020a0a0a020a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000270000002400002a0000030303030002020a0a0a020a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0220002b0000000000000000000000030303030002020a0a0a020a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000000000002100290000260003030303000a0a0a0a0a020a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
02000000002300000000000000000003030303000a0a0a0a0a0a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000040410303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200100008080808080808080050510303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000008080808080808081100000303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200100000070707070707070000000303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000007070707070707070000000303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200001000070707070707000011000303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0200000000000000000000000000000303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
