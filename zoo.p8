pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

-- game state
state={menu=1,lvl=2}
paused=0

maprect = {} -- x, y, width, height, xdrawoffset, ydrawoffset

-- player
player = {}

-- consts
gridsize = 8
dimensions = 16

-- sprite indexes
index = {
	player = 64,
	death = 72,
	 
	block = 58,
	wblock = 60,

	cexit = 51,
	oexit = 52,

	key = 48,
	tank = 49,
	bow = 50,

	rpenguin = 80,
	dpenguin = 81,
	upenguin = 82,
	whale = 105,

	jelly1 = 84,
	jelly2 = 85,
	ujelly1 = 86,
	ujelly2 = 87,

	bturtle = 100,
	fturtle = 101,
	blturtle = 89,
	flturtle = 88,

	usnake = 103,
	dsnake = 104,

	pbird = 137,
	pbird2 = 138,
	pnest = 139,
	penest = 140,
	bbird = 153,
	bbird2 = 154,
	bnest = 155,
	benest = 156,
	ybird = 169,
	ybird2 = 170,
	ynest = 171,
	yenest = 172,

	ice = 32,
}

-- animations: todo: key is 1st sprite, value is max sprite #
anim = {
	water1 = 1,
	water2 = 2,
}

-- sprite flags
fwalkable = 0x1
fwater = 0x2
fice = 0x4
--ffire = 0x8
fdeath = 0x40
fclimbable = 0x80

-- debug
blkmsg = 0

-- animations
tick = 0

-- current block sprite positions
sprites = {}
animals = {}
blocks = {}
exit = {}

-- temp structures
moved = {}

-- ui
steps = 0
asteps = 0

function _init()

	reload(0x2000, 0x2000, 0x1000) -- reload map tiles
	
	player.sdx = 0 -- slide direction
	player.sdy = 0
	player.sframe = 0 -- frame of a slide animation
	player.sblock = false -- true if sliding block in front of player
	player.buff = 0 -- buffered key input
	player.animaldelay = 0 -- slight delay after movement before animals move
	player.sprite = index.player
	
	player.delay = 0
	player.delayfunc = nil

	steps=0
	asteps=0

	-- clear sprites between levels
	for i = 1, dimensions do
		sprites[i] = {}
		animals[i] = {}
		blocks[i] = {}
		for j = 1, dimensions do
			sprites[i][j] = nil
			animals[i][j] = nil
			blocks[i][j] = nil
		end
	end

	-- config levels
	if (state.lvl == 1) then
		-- ice 1
		maprect = {0, 0, 8, 8, 4, 4}
        player.x = 4
        player.y = 8
		exit.x = 6
		exit.y = 0
		exit.sprite = index.cexit
		sprites[7][4] = index.key
		animals[3][1] = index.dpenguin
		animals[4][1] = index.dpenguin
		animals[5][1] = index.dpenguin
	elseif(state.lvl==2) then
		-- ice 2
		maprect = {8, 0, 9, 8, 4, 4}
        player.x = 1
        player.y = 3
		exit.x = 6
		exit.y = 9
		exit.sprite = index.oexit
		sprites[2][4] = index.bow
		sprites[4][2] = index.bow
		sprites[6][1] = index.bow
		blocks[2][2] = index.block
		blocks[6][2] = index.block
		animals[3][1] = index.dpenguin
		animals[4][1] = index.dpenguin
		animals[5][1] = index.dpenguin
		animals[4][5] = index.whale
	elseif(state.lvl == 3) then
		-- aviary 1
		maprect = {0, 8, 8, 8, 4, 4}
        player.x = 8
        player.y = 2
		exit.x = 0
		exit.y = 8
		exit.sprite = index.cexit
		sprites[3][7] = index.key
		blocks[6][5] = index.block
		animals[2][4] = index.usnake
		animals[5][1] = index.usnake
	elseif(state.lvl == 4) then
		-- aviary 2
		maprect = {8, 8, 16, 8, 0, 4}
        player.x = 12
        player.y = 2
		exit.x = 1
		exit.y = 8
		exit.sprite = index.oexit
		sprites[2][2] = index.yenest
		sprites[15][2] = index.benest
		sprites[7][7] = index.penest

		blocks[2][5] = index.block
		blocks[11][3] = index.block
		blocks[14][3] = index.block

		animals[4][3] = index.pbird2
		animals[13][6] = index.bbird2
		animals[2][8] = index.usnake
		animals[15][8] = index.usnake

	elseif(state.lvl == 5) then
		-- ocean 1
		maprect = {0, 16, 8, 8, 4, 4}
        player.x = 1
        player.y = 6
		exit.x = 1
		exit.y = 0
		exit.sprite = index.cexit
		sprites[8][8] = index.key
		sprites[3][3] = index.tank
		sprites[7][4] = index.tank
		sprites[3][8] = index.tank
		sprites[8][7] = index.tank
		animals[1][1] = index.jelly1
		animals[1][2] = index.jelly2
		animals[2][1] = index.ujelly1
		animals[6][6] = index.jelly1
		animals[6][3] = index.fturtle
		animals[5][3] = index.bturtle
	end
end

function _update60()
	local dx = 0
	local dy = 0

	-- delay slightly after player death
	if (player.delay > 0) then
		player.delay -= 1
		return
	end
	if (player.delayfunc != nil) then
		player.delayfunc()
	end

	-- check for death
	if (checkdeath()) then
		killplayer()
	end

	pickup(player.x, player.y)

	-- buffer last key pressed during animal movement
	local b = btnp()
	if (b > 0) player.buff = b

	-- skip player movement while animals are moving
	if (player.animaldelay > 0) then
		player.animaldelay -= 1
		
		if (player.animaldelay == 0) then 
			moveanimals()
			if (checkanimalattack()) killplayer()
			return
		end
	end

	-- player is sliding on ice, so update animation until we stop
	if (player.sdx != 0 or player.sdy != 0) then

		-- update pos every n frames
		if ((tick % 1) == 0) then
			player.sframe += 1
		end

		-- advance player one full grid unit and check if we can continue sliding
		if (player.sframe > gridsize) then 
			player.sframe = 0
			player.x += player.sdx
			player.y += player.sdy
						
			-- stop sliding if we were unable to move
			if (moveplayer(player.sdx,player.sdy) == false) then
				player.sdx = 0
				player.sdy = 0
				player.animaldelay = 10
			end
		end
	else
		-- normal player movement
		if (b == 0) b = player.buff
		player.buff = 0

		if (band(b, 0x1) > 0) then
			dx=-1
		elseif (band(b, 0x2) > 0) then
			dx=1
		elseif (band(b, 0x4) > 0) then
			dy=-1
		elseif (band(b, 0x8) > 0) then
			dy=1
		end

		if (moveplayer(dx,dy)) then
			steps+=1

			if (player.sdx == 0 and player.sdy == 0) then
				-- didn't start sliding
				player.animaldelay = 10
			end
		end
	end

	-- update any tiles
	for i=1,maprect[3] do
		for j=1,maprect[4] do
			if (blocks[i][j] and band(fget(mgetspr(i,j)), fwater) > 0) then
				blocks[i][j] = nil
				msetspr(index.wblock,i,j)
			end
		end
	end

	-- did the player win?
	if (player.x == exit.x and player.y == exit.y) then
		blkmsg = "reached exit!"

		state.lvl += 1
		if (state.lvl == 5) state.lvl = 1
		_init()
	end

	-- animate map tiles
	animatewater()
	animatestaticanimals()

end

function _draw()
	tick+=1
	if (tick > 256) tick = 0;

	if (state.menu==0) draw_startmenu()
	if (state.menu==1) draw_level()
	if (state.menu==2) draw_pause()
	if (state.menu==3) draw_ending()

end

function draw_startmenu()
	-- draw the start menu
	cls()

	rectfill(0, 0, 127, 127, 13)



end

function draw_pause()
	-- enter key menu options
end

function draw_ending()
	-- needs some pixels here for when you win
end

function draw_level()
	cls()

	-- draw map
	local ox = maprect[5]*gridsize
	local oy = maprect[6]*gridsize
	local wp = maprect[3]*gridsize
	local hp = maprect[4]*gridsize
	local w = 2
	rectfill(ox-w, oy-w, ox+wp+w-1, oy+hp+w-1, 5)
	map(maprect[1], maprect[2], ox, oy, maprect[3], maprect[4])

	-- draw ice sheen
	drawice()

	-- draw exit tile
	sprgrid(exit.sprite, exit.x, exit.y)

	-- draw sprites
	for i=1, dimensions do
		for j=1, dimensions do
			sprgrid(sprites[i][j], i, j)
			sprgrid(animals[i][j], i, j)
			sprgrid(blocks[i][j], i, j)
		end
	end

	-- draw player
	local pox = (player.x + maprect[5] - 1)*gridsize + player.sdx*player.sframe
	local poy = (player.y + maprect[6] - 1)*gridsize + player.sdy*player.sframe
	drawoutline(player.sprite, pox, poy)
	spr(player.sprite, pox, poy)

	-- draw block pushed by player one square ahead of the player
	if (player.sblock) spr(index.block, pox+gridsize*player.sdx, poy+gridsize*player.sdy)

	-- ui
	if (blkmsg != nil and blkmsg != 0) then
		print(blkmsg)
		--blkmsg = nil
	else
		--print("steps: " .. steps .. "  [animal: " .. asteps .. "]")
	end
end

function animatewater()
	if ((tick % 64) == 1) then 
		for x=1, dimensions do
			for y=1, dimensions do
				if (mget(x, y) == anim.water1) then
					mset(x, y, anim.water2)
				elseif(mget(x, y) == anim.water2) then
					mset(x, y, anim.water1)
				end
			end
		end
	end
end

function animatestaticanimals()
	if ((tick % 64) == 1) then
		for i=1, maprect[3] do
			for j=1, maprect[4] do
				animals[i][j] = swap(animals[i][j], index.jelly1, index.jelly2)
				animals[i][j] = swap(animals[i][j], index.ujelly1, index.ujelly2)
			end
		end
	end
end

-- if a== s1 or s2, swap it, otherwise return a. hack for less lines of code
function swap(a, s1, s2)
	if (a == 0) return 0
	if (a == s1) return s2
	if (a == s2) return s1
	return a
end

function drawice()
	local px = player.x
	local py = player.y

	local w = maprect[3]

	for i=1, w do
		for j=1, maprect[4] do
			if (mgetspr(i,j) == index.ice) then
				--if (i == (px+1 -j)%w+1) sprgrid(index.ice+4, i, j)
				--if (i == (px - j )%w+1) sprgrid(index.ice+3, i, j)
				--if (i == (px-1 -j)%w+1) sprgrid(index.ice+2, i, j)
				--if (i == (px-2 -j)%w+1) sprgrid(index.ice+1, i, j)

				if (j == (py+1-i)%w+1) sprgrid(index.ice+4, i, j)
				if (j == (py  -i)%w+1) sprgrid(index.ice+3, i, j)
				if (j == (py-1-i)%w+1) sprgrid(index.ice+2, i, j)
				if (j == (py-2-i)%w+1) sprgrid(index.ice+1, i, j)
			end

		end
	end
end

function drawoutline(s, x, y)
	for i=0,7 do
		for j=0,7 do

			local px = (s%16)*8+i
			local py = flr(s/16)*8 + j

			if (sget(px,py) > 0) then
				--rect(x+i-1, y+j-1, x+i+1, y+j+1, 5)
				rect(x+i-1, y+j, x+i+1, y+j, 5)
				rect(x+i, y+j-1, x+i, y+j+1, 5)
			end
		end
	end
end

function sprgrid(s, x, y)
	if (s) spr(s, (x + maprect[5] - 1)*gridsize, (y + maprect[6] - 1)*gridsize)
end

function mgetspr(x, y)
	if (x < 1 or x > maprect[3] or y < 1 or y > maprect[4]) return nil

	return mget(x + maprect[1] - 1, y + maprect[2] - 1)
end

function msetspr(s, x, y)
	if (x < 1 or x > maprect[3] or y < 1 or y > maprect[4]) return
	mset(x+maprect[1]-1,y+maprect[2]-1,s)
end

function moveanimals()
	-- track which animals have already moved
	moved = {}
	for i=1, dimensions do
		moved[i] = {}
		for j=1, dimensions do
			moved[i][j] = false
		end
	end

	-- move animals in place from top of grid to bottom of grid
	for i=1, dimensions do
		for j=1, dimensions do
			if (moved[i][j] == false) then 
				local a = animals[i][j]

				if (a == index.dpenguin or a == index.upenguin) then
					moveanimal(a, index.upenguin, index.dpenguin, i, j)
				elseif(a == index.usnake or a == index.dsnake) then
					moveanimal(a, index.usnake, index.dsnake, i, j)
				end

				if (a==index.fturtle or a==index.flturtle) then
					movebiganimal(a, index.flturtle, index.fturtle, index.blturtle, index.bturtle, i, j)
				end
			end
		end
	end

	asteps += 1
end

function movebiganimal(a, lf, rf, lb, rb, i, j)
	local turned = nil
	local tbutt = nil
	local butt = nil
	local dx = 0
	local dy = 0

	if (a == lf) then
		dx=-1
		dy=0
		turned = rf
		tbutt = rb
		butt = lb
	elseif(a == rf) then
		dx=1
		dy=0
		turned = lf
		tbutt = lb
		butt = rb
	else
		return
	end

	if (acanmove(i,j,dx,dy)) then
		animals[i-dx][j-dy] = nil
		animals[i][j] = butt
		animals[i+dx][j+dy] = a
		moved[i+dx][j+dy] = true
	else
		if (a==lf) then
			animals[i+1][j] = turned
			animals[i][j] = tbutt
			moved[i+1][j] = true
		else
			animals[i-dx][j-dy] = turned
			animals[i][j] = tbutt
			moved[i-dx][j-dy] = true
		end
	end
end

function moveanimal(a, up, down, i, j)
	local flipped = nil
	local dx = 0
	local dy = 0

	if (a == down) then
		dx=0
		dy=1
		flipped = up
	elseif(a == up) then
		dx=0
		dy=-1
		flipped = down
	else
		return
	end

	if (acanmove(i,j,dx,dy)) then
		animals[i][j] = nil
		animals[i+dx][j+dy] = a
		moved[i+dx][j+dy] = true
	else
		animals[i][j] = flipped
	end
end

function ispushablebiganimal(x, y)
	local a = animals[x][y]
	if (a==index.fturtle or a==index.flturtle or a==index.bturtle or a==index.blturtle) return true
	return false
end

function pickup(x, y)
	if (x <= 0 or y <= 0) return nil

	local s = sprites[x][y]
	sprites[x][y] = nil

	-- open the exit door
	if (s == index.key) then
		exit.sprite = index.oexit
	end

	return s
end

function acanmove(ax, ay, dx, dy)
	if (dx == 0 and dy == 0) return false

	local x = ax + dx
	local y = ay + dy
	local nx = x + dx
	local ny = y + dy

	local s = mgetspr(x, y)
	local flags = fget(s)

	if (animals[x][y]) return false
	if (blocks[x][y]) return false
	if (player.x == x and player.y == y) return false
	if (band(flags, fwater) > 0) return false
	if (band(flags, fwalkable) > 0) return true

	return false
end

function checkanimalattack()
	for i=1, maprect[3] do
		for j=1, maprect[4] do
			local a = animals[i][j]
			if (band(fget(a), fdeath) > 0) then
				if (player.x >= i-1 and player.x <= i+1 and player.y >= j-1 and player.y <= j+1) then
					killplayer()
					return
				end
			end

			-- jelly death
			if (a==index.ujelly1 or a==index.ujelly2 or a==index.jelly1 or a==index.jelly2) then
				if ((player.x==i-1 or player.x==i+1) and player.y==j) killplayer()

				if (a==index.ujelly1 or a==index.ujelly2) then
					if (player.y==j-1 and player.x==i) killplayer()
				else
					if (player.y==j+1 and player.x==i) killplayer()
				end
			end
		end
	end
end

function killplayer()
	--blkmsg = "death"
	player.delay = 60
	player.sprite = index.death
	player.delayfunc = _init
end

function checkdeath()
	local s = mgetspr(player.x, player.y)
	if (band(fget(s), fdeath) > 0) return true
	return false
end

-- check if transitioning between these two blocks is a slide movement
function moveisslide(x, y, dx, dy)	
	if (band(fget(mgetspr(x, y)), fice) > 0 or band(fget(mgetspr(x+dx, y+dy)), fice) > 0) return true 
	return false
end

function isblock(x, y)
	if (x <= 0 or y <= 0) return false
	if (blocks[x][y]) return true
	return false
end

function canpushblockto(x, y, flags)
	if (x <= 0 or y <= 0) return false

	if (animals[x][y]) return false
	if (blocks[x][y]) return false
	if (band(flags, fwalkable) > 0) return true
	if (band(flags, fwater) > 0) return true
	if (band(flags, fice) > 0) return true
	return false
end

function canwalkto(x, y, flags)
	if (x <= 0 or y <= 0) return false

	if (animals[x][y]) return false
	if (blocks[x][y]) return true
	if (band(flags, fwalkable) > 0) return true
	if (band(flags, fwater) > 0) return true
	if (band(flags, fice) > 0) return true
	return false
end

-- return true if the player can move to the adjacent block
function moveplayer(dx, dy)
	if (dx == 0 and dy == 0) return false

	local x = player.x + dx
	local y = player.y + dy
	local nx = x + dx
	local ny = y + dy
	local s = mgetspr(x, y)
	local ns = mgetspr(nx, ny)
	local flags = fget(s)
	local nflags = fget(ns)


	-- handle normally out of bounds exit tiles (may have 0-index)
	if (x == exit.x and y == exit.y and exit.sprite == index.oexit and player.sblock == false) then
		player.x = x
		player.y = y
		return true
	end

	if (x <= 0 or y <= 0) return false

	-- try to continue sliding a block
	if (player.sblock) then
		-- drop block in water
		if (band(flags, fwater) > 0) then
			msetspr(index.wblock,x,y)
			player.sblock = false
			return false
		end

		-- continue pushing unless we already pushed it onto non-ice
		if (band(flags, fice) > 0 and canpushblockto(nx, ny, nflags)) return true

		-- stop pushing here
		blocks[x][y] = index.block
		player.sblock = false
		return false
	end

	-- try to move by pushing or sliding a block
	if (isblock(x, y)) then
		if (player.sdx != 0 or player.sdy != 0) then
			-- if sliding, hitting a block stops the player
			return false
		end

		if (canpushblockto(nx, ny, nflags)) then
			if (moveisslide(x, y, dx, dy)) then
				blocks[x][y] = nil
				player.sblock = true
			else
				blocks[nx][ny] = blocks[x][y]
				blocks[x][y] = nil
			end
		else
			return false
		end
	end

	-- if we are sliding and not currently on ice, stop moving
	if ((player.sdx > 0 or player.sdy > 0) and band(fget(mgetspr(player.x,player.y)), fice) == 0) return false

	-- normal slide or walk
	if (canwalkto(x, y, flags)) then
		if (moveisslide(player.x, player.y, dx, dy)) then
			player.sdx = dx
			player.sdy = dy
		else 
			player.x += dx
			player.y += dy
		end

		return true
	end

	return false
end

__gfx__
00000000ccccccccc7ccccc744444449000000006656656600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000ccccccc77ccccccc94494449000000006656656600000000000000000000000000000000000000000000000000000000000000000000000000000000
007007007ccccc7ccccc7ccc44994444000000005556655500000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000cccc7cccc7c7cccc44444444000000006666666600000000000000000000000000000000000000000000000000000000000000000000000000000000
00077000ccc7c7cccc7ccccc44499444000000006666666600000000000000000000000000000000000000000000000000000000000000000000000000000000
00700700cc7ccccccccccccc44444444000000005556655500000000000000000000000000000000000000000000000000000000000000000000000000000000
000000007ccccccccccc7c7c99449994000000006656656600000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000c7ccccc7ccccc7cc94444444000000006656656600000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333499444443344443349944444333b33330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3333333344444944334444334444494433b3b3b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333949444993344443394944499333bbb3b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
333333333344443333444433333333333b3b3bb30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3333333333444433334444333333333333b3bb3b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
333333333344443333444433333333333b3bb3b30000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333334444333344443333333333333b33330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
333333333344443333444433333333333333b3330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ccccccccccccccc77777777ccccccccccc77cccc0000000000000000000000000000000011111111111111111111111155555555555555550000000000000000
cccccccccccccc77777777ccccccccccc77ccccc0000000000000000000000000000000011111111111111111141141155555555555555550000000000000000
ccccccccccccc77777777ccccccccccc77cccccc0000000000000000000000000000000011111111113111111111111155555555555555550000000000000000
cccccccccccc77777777ccccccccccc77ccccccc0000000000000000000000000000000011111111131113111111111155555555555555550000000000000000
ccccccccccc77777777ccccccccccc77cccccccc0000000000000000000000000000000011111111113131111111411455555555555555550000000000000000
cccccccccc77777777ccccccccccc77ccccccccc0000000000000000000000000000000011111111131113111411111155555555555555550000000000000000
ccccccccc77777777ccccccccccc77cccccccccc0000000000000000000000000000000011111111113131111141141157756675555555550000000000000000
cccccccc77777777ccccccccccc77ccccccccccc0000000000000000000000000000000011111111111111111111111166777776555555550000000000000000
117777110005500000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccc000000000000000000000000
17cccc710055550000000000000000000000000000000000000000000ee00ee00ee0ee00000000000544445000000000c544445c000000000000000000000000
7ccc7cc700aaaaa00000000000000000000000000000000000000000e88ee88ee88e88e0000000000454454005444450c454454c000000000000000000000000
7cccc7c70055550a0000000000000000000000000000000000000000e888888ee88888e0000000000445544004544540c445544c000000000000000000000000
7cccc7c70055550a0000000000000000000000000000000000000000e888888e0e888e00000000000445544004455440c445544c000000000000000000000000
7ccc7cc700aaaa0a00000000000000000000000000000000000000000e8888e000e8e000000000000454454004455440c454454c000000000000000000000000
17cccc71005555a0000000000000000000000000000000000000000000e88e00000e0000000000000544445004544540c544445c000000000000000000000000
11777711005555000000000000000000000000000000000000000000000ee00000000000000000000000000005444450cccccccc000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ccc00c
00ccc00000cccc0000cccc0000cccc0000cccc0000ccc00000ccc00000cccc0000cccc0000cccc000000000000000000000000000000000000cccc000c666cc0
0c44cc000cc444c00cc444c00cc444c00cc444c00ccccc000ccccc000c444cc00c444cc00c444cc0000000000000000000000000000000000c444cc0c66666c0
cc040cc0ccc040c0ccc040c0ccc040c0ccc040c0ccccccc0ccccccc00c040ccc0c040ccc0c040ccc000000000000000000000000000000000c040cccc65656cc
cc444c00ccc44400ccc44400ccc44400ccc44400cccccc00cccccc0000444ccc00444ccc00444ccc0000000000000000000000000000000000444cccc66666c0
0ceeecc00cce4e400ccee0000ccee0000ccee0000cccccc00cccccc0000eecc0000eecc004e4ecc00000000000000000000000000000000000eeecc00c555ccc
04aaa4c000caa00000c4a00000c4aa0000a4a00004aaa4c004aaa4c0000a4acc000a4ccc000aaccc0000000000000000000000000000000000aa4c00006660c0
00a0a00000a0a000000aa000000a00000000a00000a0a00000a00000000a0000000aa000000a0a000000000000000000000000000000000000a0a000000000c0
00005500005550000055500000000000000000000000000000000000009990000000999000000900000000000000000000000000000000000000000000eeee00
0005599000595000005550000000000000ccc00000ccc00000ccc000099999000009999900ccc90000000000000000000000000000000000000000000eeefee0
005555000055500000555000000000000c44cc000c44cc000ccccc0099040990009904090c99990000000000000000000000000000000000000000000edffde0
00555700055755000555550000000000cc040cc0cc040cc0ccccccc09944499000994449c96669c000000000000000000000000000000000000000000effffe0
00557700057775000555550000000000cc444c00cc444c00cccccc000e999e000000e494cc999c0000000000000000000000000000000000000000000e666ee0
005577000577750005555500000000000ceeecc00ceeecc00cccccc004aaa400000aaa000ceeecc000000000000000000000000000000000000000000ebbbbe0
0055570005575500055555000000000004aaa4c004aaa4c004aaa4c000a0a00000000a0004aaa4c0000000000000000000000000000000000000000000ebbe00
000599000099900000959000000000000000a00000a000000000a000000000000000000000a0a0000000000000000000000000000000000000000000000bb000
0000000000000000550000550000000000005535355000000000055353550000000000000001110000eeee0000eeee000e00e00ee00e00e000000000d09090d0
002220000000000005500005550000000005535553550000000055355535500000000000000010000ee77ee00ee77ee0e00e00e00e00e00e00000000dd090ddd
205250220000000005550555555555000033333333333bb00bb33333333333000000000005555500ee7777eeee7777ee0e00e00ee00e00e000000000edd9dded
222222200000000000555555555585500535535535535b5bb5b535535535535000000000555555000eeeeee00eeeeee0e00e00e00e00e00e00000000ded9dedd
00222200000000000055555555555555bb33333333333bbbbbb33333333333bb0000000055555550e00e00e00e00e00e0eeeeee00eeeeee000000000ddd9ddd0
02220220000000000555055555567670000bb3333bbb00000000bbb3333bb00000000000555575500e00e00ee00e00e0ee7777eeee7777ee0000000000d9d000
220220220000000005500000555555000bbbb00000bbb000000bbb00000bbbb00000000050055050e00e00e00e00e00e0ee77ee00ee77ee000000000ddd9ddd0
20002000000000005500000555000000bbb000000bbb00000000bbb000000bbb00000000000000000e00e00ee00e00e000eeee0000eeee0000000000ed000ded
000000406000000600000000060060000333000203350ddd0999000000777700000004400777000044004044e000e0000999044000000bb0000bbbb000000000
0666000460000066900909500e00e0008b830022033333d04549000007777770044400440a57007004440004eeee0000999990440000bbb80bbbb00b00000000
6686604066006660995900900e00e000bbb3022000000300444999007777777745f54004aa777770064640440e0e000095f5900400bbbb000bb0000000000000
6666604006556000399309500666600000b32223003f330004999449565777770fff00040777777004f44440eeeeeeee9fff90040bbbb00000000bb000000000
0066604400550555999959900d6d666000b3223333ff000004494449666777770444404407777770044444400eeeeee0099940440bb00000000bbbb000000000
006666640555555505995990066666670bb323303000003004449449077777770044444007777700044444400eeeeee00044444000000bb000bbbb0000000000
006666600055555509999950066666670b3b3b303300033004040049007777700044440000a7a000040400400eeeeee000444400b00bbbb08bbb000000000000
0006066000d0d00d0909009006666660030303300333330004040040006000600400440000a0a000040400400e0e00e0040044000bbbb0000bb0000000000000
000000000000610000000000000000000000700000000000000000000ccccc700002200000022000000022000000000000000000000000000000000000000000
000000000006c6000000000000000007700777077000000000666600cc1115770002900020029002000022900000000000000000000000000000000000000000
0000000000616000000000000000007cc777c77cc700000006777760c166775c0002200022022022000022000000000000000700000000000000000000000000
0000000006c60000000000000000707ccc7ccc7cc707000006777760c167771c00222200e222222e000222200000000000007770000000000000000000000000
0000000006160000000000000707c77ccc6ccc7cc77c707000677600cc5771cc022222200e2222e02222e2202000000220077772000000000000000000000000
00000000006c6000000000007c7ccc6ccc6ccc6cc7ccc7c70006600007751cc022e22e2200e22e00022e22200e2002e00e2772e0000000000000000000000000
0000000000661600000000007c6ccc6cc666c666c6ccc6c700000000007ccc002e0929e200092900002222002ee22ee22ee22ee2000000000000000000000000
000000000006c600000000006666666666666666666666660000000000000000e022220e002222000009090002eeee2002eeee20000000000000000000000000
00000000000616000000000000000000000aa0a0000000000c111c000c111c000001100000011000000011000000000000000000000000000000000000000000
0000000006661c6006000660000a000000a90000000000000c191c000c191c000001900010019001000011900000000000000000000000000000000000000000
0666000006c1c66666606c660000aa00a09900aaa000a0000c111c000c111c000001100011011011000011000000000000000700000000000000000000000000
66c66066666c666666666707000009a00989a0098a000a00c1165570c122857000111100c111111c000111100000000000007770000000000000000000000000
707666666661c66550567cc000a0098998889098890aaa00c16771c0c16771c0011111100c1111c01111c1101000000110077771000000000000000000000000
0cc7655066c166600005670c0a90a988888899889a9989a0c17761c0c17761c011c11c1100c11c00011c11100c1001c00c1771c0000000000000000000000000
c0765000066c665000005660a9999888888888888998889ac55611c0c55611c01c0919c100091900001111001cc11cc11cc11cc1000000000000000000000000
06650000006660000000000099888888888888888888888907999c0007999c00c011110c001111000009090001cccc1001cccc10000000000000000000000000
0000000000666600000000000000000000000000000000000005500000c11c070000000000000000000000000000000000000000000000000000000000000000
00000000000666000000000000000000000a000000a00a00005500050c11cc750000000000000000000000000000000000000000000000000000000000000000
000000000066666000000000000000a000a0000000aa000005555055c11117550000000000000000000000000000000000000700000000000000000000000000
0000000006c666c60000000000000a000a9a0a000a000000550555501101551c0000000000000000000000000000000000007770000000000000000000000000
0000000006677766000000000a0000a9a99900a009a0a000555555501115511c0000000000000000000000009000000990077779000000000000000000000000
00000000007ccc700000000000a00a9999899999a9900a0005555055c1551c110000000000000000000000000a9009a00a9779a0000000000000000000000000
000000000067c760000000000a9a099898899989999999a000500005075cc0c10000000000000000000000009aa99aa99aa99aa9000000000000000000000000
000000000005c50000000000a999a988888899889988999a005500000711c00c00000000000000000000000009aaaa9009aaaa90000000000000000000000000
00000000000000000000000000000000000000000000000008000080005550000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000088800888005950000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000088888888005550000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000a0000000a00000008882880058285000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000a000090000000a0000088822888057775000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000a000a00a9900000900000a28200282057775000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000900009999999009999000a002000020055755000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000099900998998990999899099900000000009990000000000000000000000000000000000000000000000000000000000000000000
55555555555555555555555555555555000000444400000000000000000000000000000000000044440000000000000000000000000000000000000000000000
5ccccc755bbbb3b5511111455433bbb5000000444400000000000000000000000000000000004444444400000000000000000000000000000000000000000000
5cccc7755b3b3bb551311115543bbbb50000004444000000ccccccccbbbbbbbb6666666600004444444400000000000000000000000000000000000000000000
5ccc77c553b33b35531141155433bbb50000004444000000c111111cb333333b6555555600004444444400000000000000000000000000000000000000000000
5cc77c755b3333b551311415543334350000904444090000c111111cb333333b6555555600004444444400000000000000000000000000000000000000000000
555555555555555555555555555555550000994444990000ccccccccbbbbbbbb6666666600004444444400000000000000000000000000000000000000000000
5000000550000005500000055000000500009044440900001cc77cc13bb77bb35667766500004409904400000000000000000000000000000000000000000000
50000005500000055000000550000005000000444400000001cccc1003bbbb300566665000009009900900000000000000000000000000000000000000000000
00444400004444000044440000000000000000000000000000000500000005000000050000000000000000000000000000000000000000000000000000000000
044bb440044334400443344000000000000000000000000000000500aa0005aa0000050000000000000000000000000000000000000000000000000000000000
04baab40043aa34004333340000000000000055555000000055555500aa55aa00055550000000000000000000000000000000000000000000000000000000000
04babb40043a33400433334000000000000055000550000005505050055050500050550000000000000000000000000000000000000000000000000000000000
04baab40043aa34004333940000000000000500000500000050505500aa50aa00055050000000000000000000000000000000000000000000000000000000000
04babb40043a33400433334000000000000111000bbb000005555550aa5555aa0055550000000000000000000000000000000000000000000000000000000000
04baab40043aa3400433334000000000111151000b5bbbbb05655650056556500056550000000000000000000000000000000000000000000000000000000000
04bbbb4004333340043333400000000011015cc0335b0b0b05555550055555500055550000000000000000000000000000000000000000000000000000000000
0044440000444400004444000044440010011c5553bb000b0aaa00000aaaaaa00000aaa000077700007770000077700000777777777777777777770000000000
044cc44004411440044224400440044000000cc033000000aa00000000000000000000aa00777770077777000777770007722222222222222222277000000000
04caac40041aa140042aa2400400004000000c0003000000a00a7777777777777777a00a00777777777777777777770077277777777777777777727700000000
04cacc40041a1140042a22400400004000000cc033000000a0a777777777777777777a0a07777777777777777777777072777777777777777777772700000000
04caac40041aa140042aa2400400004000000c000300000000777777777777777777770077777777777777777777777772777777777777777777772700000000
04cacc40041a1140042a22400400004000000cc03300000000777777777777777777770077777777777777777777777772777777777777777777772700000000
04caac40041aa140042aa24004000040000000000000000000777777777777777777770067777777777777777777777672777777777777777777772700000000
04cccc40041111400422224004000040000000000000000000777777777777777777770006777777777777777777776072777777777777777777772700000000
0011110000cccc000033330000bbbb0000000000770a0aaa00777777777777777777770000777777777777777777770072777777777777777777772700000000
0010010000c00c000030030000b00b00000000000770000000777777777777777777770007777777777777777777777072777777777777777777772700000000
0011110000cccc000033330000bbbb00000000000777777700777777777777777777770077777777777777777777777772777777777777777777772700000000
00010000000c000000030000000b000000000000a077777700777777777777777777770077777777777777777777777772777777777777777777772700000000
00010000000c000000030000000b00000000000000777777a0a777777777777777777a0a67777777777777777777777672777777777777777777772700000000
00011000000cc00000033000000bb00000000000a0777777a00a7777777777777777a00a06677777677777767777766077277777777777777777727700000000
00010000000c000000030000000b000000000000a0777777aa00000000000000000000aa00067776067777606777600007722222222222222222277000000000
00011100000ccc0000033300000bbb0000000000a07777770aaa00000aaaaaa00000aaa000006660006666000666000000777777777777777777770000000000
__gff__
00434300000000000000000000000000008181010000000000000000000000000505050505000000000101010000000000000000000000000000000001000000002a8b180000000000000000000000000000000000000000000000000000000000ef000000000000000000000000000000000000000000000000000000404000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000
__map__
20202020202020202d20202020202029000a0a0a000a0a0a0a0a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2020202020202020202020202020202900000000000a0a0a0a0a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2d2d2020202d2c2c202020202020202900000000000a0a000a0a0a0a0a0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2d2d2020202d2020202020202020202900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2d2d2020202d20202d2d02020102020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2c2c2020202d20200201020102020102000a0a0a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
20202020202c2020010201010101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
202020202020202002010101020102010000000000000a0a0a0a0a0a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1014101412101014101014141410101012101012101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1410141412101410101010141414101012101012101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1010141012131313141210141410141012101010101012140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1012101412141010101214121414101012101313131311130000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1012141012101410101210121414141012101010101012140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1412101011131313131113121014101012141010101012100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1012101012101410141210121410101012101410121412100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1412030101010101101214121014121010141010121012100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2929030303030303000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
29292929292b2b2a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0303292929292b2b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
032b2929292b292b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2a2929292929292b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2929292929292b29000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b2b29292929292b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2b2b292a292b2b2b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05052d2d2d2d2d2d050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05052d050505052d050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05052d050505052d050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05052d2d2d2d2d2d050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
